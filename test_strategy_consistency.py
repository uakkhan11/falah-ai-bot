import os
import pandas as pd
from datetime import datetime, timedelta
from improved_fetcher import SmartHalalFetcher
from strategy_utils import (
    add_indicators, breakout_signal,
    bb_breakout_signal, bb_pullback_signal,
    combine_signals
)

# Path to your bot's fetched swing data
SWING_DATA_DIR = "SmartHalalFetcher"

def load_data_for_symbol(symbol, years=2):
    path = os.path.join(SWING_DATA_DIR, f"{symbol}.csv")
    if not os.path.exists(path):
        print(f"Data file not found for {symbol}: {path}")
        return None
    df = pd.read_csv(path, parse_dates=['date'])
    cutoff_date = datetime.now() - timedelta(days=365*years)
    df = df[df['date'] >= cutoff_date].sort_values('date').reset_index(drop=True)
    return df

def compute_signals(df):
    df = add_indicators(df)
    df = breakout_signal(df)
    df = bb_breakout_signal(df)
    df = bb_pullback_signal(df)
    df = combine_signals(df)
    return df

def compare_with_backtest(df, backtest_df):
    # Align columns for comparison
    cols = ['date', 'entry_signal', 'entry_type', 'breakout_signal', 'bb_breakout_signal', 'bb_pullback_signal']
    merged = df[cols].merge(backtest_df[cols], on='date', suffixes=('_live', '_bt'))
    
    mismatches = {}
    for col in cols[1:]:  # skip date
        live_col = f"{col}_live"
        bt_col = f"{col}_bt"
        diff = merged[merged[live_col] != merged[bt_col]]
        if not diff.empty:
            mismatches[col] = diff[['date', live_col, bt_col]]
    return mismatches

def main():
    symbols = ["RELIANCE", "SUNPHARMA", "EIHOTEL"]  # Update with your symbols

    # Load your saved backtest signals from CSVs generated by your backtest
    # Ensure these CSVs exist in 'backtest_signals' directory for the 2 year span
    BACKTEST_SIGNAL_DIR = "backtest_signals"

    for symbol in symbols:
        print(f"\nValidating signals for {symbol} (last 2 years)...")
        live_df = load_data_for_symbol(symbol, years=2)
        if live_df is None:
            continue
        live_df = compute_signals(live_df)

        backtest_path = os.path.join(BACKTEST_SIGNAL_DIR, f"{symbol}_signals.csv")
        if not os.path.exists(backtest_path):
            print(f"Backtest signals file missing for {symbol}: {backtest_path}")
            continue
        backtest_df = pd.read_csv(backtest_path, parse_dates=['date'])
        backtest_df = backtest_df[backtest_df['date'] >= (datetime.now() - timedelta(days=365*2))].reset_index(drop=True)

        mismatches = compare_with_backtest(live_df, backtest_df)
        if mismatches:
            print(f"\nFound mismatches for {symbol}:")
            for col, diff_df in mismatches.items():
                print(f"\nColumn: {col}")
                print(diff_df)
        else:
            print(f"Signals matched perfectly for {symbol} in last 2 years.")

if __name__ == "__main__":
    main()
